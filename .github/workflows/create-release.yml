name: Create Release

on:
  pull_request:
    types: [closed] # PR이 닫혔을 때 트리거

jobs:
  create-release:
    if: github.event.pull_request.merged == true # PR이 병합된 경우에만 실행
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract Release Notes from PR
        id: extract-notes
        run: |
          # PR 본문 가져오기
          if [ -z "${{ github.event.pull_request.body }}" ]; then
            echo "No PR body provided." > pr_body.txt
          else
            printf "%s" "${{ github.event.pull_request.body }}" > pr_body.txt
          fi

          # 1. 각 항목별 섹션 추출
          NEW_FEATURE=$(grep '^New Feature:' pr_body.txt | sed 's/^New Feature: //' || true)
          REFACTOR=$(grep '^Refactor:' pr_body.txt | sed 's/^Refactor: //' || true)
          OTHERS=$(grep -E '^(Bug Fix:|Chore:|Test:|Docs:)' pr_body.txt || true)

          # 2. CodeRabbit funny text 영역 추출
          FUNNY_TEXT=$(grep '^>' pr_body.txt | sed 's/^> //' || true)

          # 3. 릴리스 노트 작성
          FINAL_NOTES=""
          if [ -n "$NEW_FEATURE" ]; then
            FINAL_NOTES+="New Feature:\n${NEW_FEATURE}\n\n"
          fi
          if [ -n "$REFACTOR" ]; then
            FINAL_NOTES+="Refactor:\n${REFACTOR}\n\n"
          fi
          if [ -n "$OTHERS" ]; then
            FINAL_NOTES+="${OTHERS}\n\n"
          fi
          if [ -n "$FUNNY_TEXT" ]; then
            FINAL_NOTES+="${FUNNY_TEXT}\n"
          fi

          # 릴리스 노트가 비어있는 경우 기본값 설정
          if [ -z "$FINAL_NOTES" ]; then
            FINAL_NOTES="No release notes provided. This is an auto-generated release."
          fi

          # 디버깅을 위해 파일에 저장
          echo -e "$FINAL_NOTES" > final_notes.txt
          cat final_notes.txt

          # 환경 변수 저장
          echo "release-notes=$(cat final_notes.txt | jq -R -s .)" >> $GITHUB_ENV

      - name: Set Git user
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get latest tag
        id: get-latest-tag
        run: |
          # 최신 태그 가져오기
          TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "latest-tag=$TAG" >> $GITHUB_ENV

      - name: Determine version increment
        id: determine-version
        run: |
          # 라벨 확인
          LABELS=$(echo "${{ github.event.pull_request.labels[*].name }}")
          echo "Found labels: $LABELS"

          # 최신 태그 기본값 설정
          if [ -z "${{ env.latest-tag }}" ]; then
            LATEST_TAG="v0.0.0"
          else
            LATEST_TAG="${{ env.latest-tag }}"
          fi

          # 태그 숫자 분리
          MAJOR=$(echo $LATEST_TAG | cut -d. -f1 | cut -c2-)
          MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          PATCH=$(echo $LATEST_TAG | cut -d. -f3)

          # 라벨에 따라 증가
          if [[ $LABELS == *"MAJOR"* ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ $LABELS == *"MINOR"* ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          # 다음 태그 계산
          NEXT_TAG="v${MAJOR}.${MINOR}.${PATCH}"
          echo "next-tag=$NEXT_TAG" >> $GITHUB_ENV
          echo "Calculated next tag: $NEXT_TAG"
      

      - name: Publish Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.next-tag }}
          release_name: "Release ${{ env.next-tag }}"
          body: "${{ env.release-notes }}"
          draft: false
          prerelease: false